{"version":3,"sources":["../node_modules/bs58/index.js","../node_modules/bs58check/index.js","../node_modules/bs58check/base.js","../node_modules/base-x/src/index.js","../node_modules/bnc-onboard/dist/esm/hd-wallet-642b97e3.js","../node_modules/hdkey/lib/hdkey.js"],"names":["basex","require","module","exports","createHash","bs58checkBase","buffer","tmp","update","digest","base58","Buffer","checksumFn","decodeRaw","payload","slice","checksum","newChecksum","encode","concat","length","decode","string","Error","decodeUnsafe","_Buffer","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","source","alloc","psz","zeroes","size","b256","carry","it3","it4","vch","allocUnsafe","fill","Array","isArray","from","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","publicToAddress","ethUtil","toChecksumAddress","generateAddresses","account","offset","publicKey","chainCode","path","hdk","HDKey","addresses","dkey","deriveChild","address","toString","push","dPath","isValidPath","parts","split","undefined","accountFieldDigit","Number","isNaN","changeFieldDigit","addressFieldDigit","assert","crypto","bs58check","secp256k1","MASTER_SECRET","HARDENED_OFFSET","BITCOIN_VERSIONS","private","public","versions","this","depth","index","_privateKey","_publicKey","_fingerprint","parentFingerprint","serialize","hdkey","version","key","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","privateKeyVerify","publicKeyCreate","readUInt32BE","publicKeyVerify","publicKeyConvert","privateKey","derive","entries","forEach","c","hardened","childIndex","parseInt","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON","obj"],"mappings":"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","file":"static/js/6.40655d26.chunk.js","sourcesContent":["var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","import HDKey from 'hdkey';\nimport * as ethUtil from 'ethereumjs-util';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (parts[2] !== \"60'\" && parts[2] !== \"1'\") {\n    return false;\n  }\n\n  if (parts[3] === undefined) {\n    return true;\n  }\n\n  var accountFieldDigit = Number(parts[3][0]);\n\n  if (isNaN(accountFieldDigit) || accountFieldDigit < 0 || parts[3][1] !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldDigit = Number(parts[4][0]);\n\n  if (isNaN(changeFieldDigit) || changeFieldDigit < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldDigit = Number(parts[5][0]);\n\n  if (isNaN(addressFieldDigit) || addressFieldDigit < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n"],"sourceRoot":""}