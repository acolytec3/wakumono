{"version":3,"sources":["serviceWorker.ts","index.tsx","context/globalContext.ts","helpers/helpers.ts","App.tsx","components/walletDisplay.tsx"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","initialState","addressBook","reducer","state","action","type","web3","payload","waku","address","onboard","keys","Object","assign","GlobalContext","React","createContext","dispatch","formatAddress","substring","length","encryptMessage","publicKey","signature","a","log","EthCrypto","encryptWithPublicKey","JSON","stringify","encryptedMessage","cipher","ChatContentTopic","useReducer","useState","msgText","setMsg","toAddress","setTo","toast","useToast","handleRelayMessage","wakuMsg","msg","parse","payloadAsUtf8","chatKey","toLowerCase","decryptWithPrivateKey","privateKey","decryptedMessage","decryptedPayload","senderAddress","ethers","utils","verifyMessage","handleMessageSend","to","getSigner","signMessage","sig","WakuMessage","fromUtf8String","relay","send","handleProtocolChange","peerId","protocols","includes","StoreCodec","store","queryHistory","contentTopics","response","map","toB58String","startUp","Waku","create","config","pubsub","enabled","emitSelf","addPeerToAddressBook","getStatusFleetNodes","nodes","Promise","all","addr","dial","addObserver","libp2p","peerStore","on","bind","useEffect","removeListener","Onboard","networkId","subscriptions","wallet","ethereum","enable","providers","Web3Provider","provider","deriveChatKey","err","position","status","title","description","toString","duration","balance","network","chain","walletSelect","wallets","walletName","preferred","createIdentity","Buffer","from","chatKeyPair","broadcastChatKey","signedPubKeysignature","handleConnect","Provider","value","h","onClick","placeholder","onChange","evt","target","WalletDisplay","useContext","placement","w","size","walletReset","undefined"],"mappings":"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","file":"static/js/main.1efde3b2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nimport { ethers } from 'ethers'\n\nimport React from 'react'\nimport { Waku } from 'js-waku';\n\nexport type ethIdentity = {\n  privateKey: string,\n  publicKey: string,\n  address: string\n}\n\nexport type globalState = {\n    web3?: ethers.providers.Web3Provider,\n    address?: string,\n    onboard?: any,\n    waku?: Waku,\n    keys?: ethIdentity,\n    addressBook?: {\n      [key: string]: string\n    }\n  }\n  \n  export const initialState = {\n    addressBook: {}\n  }\n  \n  \n  export const reducer = (state: globalState, action: any): globalState => {\n    switch (action.type) {\n      case 'SET_WEB3': {\n        return { ...state, web3: action.payload.web3 };\n      }\n      case 'START_WAKU': {\n        return { ...state, waku: action.payload.waku };\n      }\n      case 'SET_ADDRESS': {\n        return { ...state, address: action.payload.address };\n      }\n      case 'SET_ONBOARD': {\n        return { ...state, onboard: action.payload.onboard };\n      }\n      case 'SET_KEYS': {\n        return { ...state, keys: action.payload.keys };\n      }\n      case 'ADD_PEER': {\n        return {...state, addressBook: Object.assign(state.addressBook, action.payload)}\n      }\n      default:\n        return state;\n    }\n  }\n\n  const GlobalContext = React.createContext<{state:globalState, dispatch: React.Dispatch<any>}>({state: initialState, dispatch: () => null})\n\n  export { GlobalContext as default } ","import EthCrypto from 'eth-crypto';\n\nexport const formatAddress = (address: string) => {\n    return (\n      address.substring(0, 4) + \"...\" + address.substring(address.length - 4)\n    );\n  };\n  \nexport const encryptMessage = async (publicKey: string, message: string, signature: string) => {\n  console.log(publicKey);\n\n  const payload = {\n    message: message,\n    signature: signature\n  }\n  const encryptedMessage = await EthCrypto.encryptWithPublicKey(publicKey, JSON.stringify(payload));\n  return EthCrypto.cipher.stringify(encryptedMessage);\n}","import {\n  Button,\n  Center, ChakraProvider,\n  Heading,\n  HStack,\n  Input, useToast, VStack\n} from \"@chakra-ui/react\";\nimport Onboard from \"bnc-onboard\";\nimport { ethers } from \"ethers\";\nimport { getStatusFleetNodes, StoreCodec, Waku, WakuMessage } from \"js-waku\";\nimport PeerId from \"peer-id\";\nimport React from \"react\";\nimport WalletDisplay from \"./components/walletDisplay\";\nimport GlobalContext, { initialState, reducer } from \"./context/globalContext\";\nimport { encryptMessage } from \"./helpers/helpers\";\nimport EthCrypto from 'eth-crypto';\n\nlet web3: ethers.providers.Web3Provider;\n\nexport const ChatContentTopic = \"dingus\";\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const [msgText, setMsg] = React.useState(\"\");\n  const [toAddress, setTo] = React.useState(\"\");\n  const toast = useToast();\n\n  const handleRelayMessage = async (wakuMsg: WakuMessage) => {\n    try {\n      const msg = JSON.parse(wakuMsg.payloadAsUtf8);\n      console.log(msg);\n      if (msg.chatKey) {\n        dispatch({\n          type: \"ADD_PEER\",\n          payload: { [msg.address.toLowerCase()]: msg.chatKey },\n        });\n      }\n    } catch (err) {\n      if (wakuMsg.payload && state.keys) {\n        try {\n          const decryptedMessage = await EthCrypto.decryptWithPrivateKey(state.keys!.privateKey,EthCrypto.cipher.parse(wakuMsg.payloadAsUtf8));\n          const decryptedPayload = JSON.parse(decryptedMessage);\n          const senderAddress = ethers.utils.verifyMessage(decryptedPayload.message, decryptedPayload.signature);\n          console.log(`Got a secret message: ${decryptedPayload.message} from ${senderAddress}`);\n        }\n        catch (err) {\n          console.log(err);\n        }\n      }\n    }\n  };\n\n  const handleMessageSend = async (to: string, msgText: string) => {\n    if (!state.web3) {\n      return;\n    }\n\n    const sig = await state.web3.getSigner().signMessage(msgText);\n    const encryptedMessage = await encryptMessage(state.addressBook![to.toLowerCase()], msgText, sig);\n    const msg = WakuMessage.fromUtf8String(encryptedMessage, ChatContentTopic);\n    state.waku?.relay.send(msg);\n  };\n\n  const handleProtocolChange = async (\n    waku: Waku,\n    { peerId, protocols }: { peerId: PeerId; protocols: string[] }\n  ) => {\n    if (protocols.includes(StoreCodec)) {\n      try {\n        const response = await waku.store.queryHistory({\n          peerId: peerId,\n          contentTopics: [ChatContentTopic],\n        });\n        if (response) {\n            response.map((wakuMsg) => handleRelayMessage(wakuMsg));\n        }\n      } catch (e) {\n        console.log(\n          `${peerId.toB58String()}: error encountered when retrieving archived messages`,\n          e\n        );\n      }\n    }\n  };\n\n  const startUp = async () => {\n    try {\n      const waku = await Waku.create({\n        config: {\n          pubsub: {\n            enabled: true,\n            emitSelf: true,\n          },\n        },\n      });\n\n      waku.addPeerToAddressBook(\n        \"16Uiu2HAmPLe7Mzm8TsYUubgCAW1aJoeFScxrLj8ppHFivPo97bUZ\",\n        [\"/dns4/node-01.do-ams3.jdev.misc.statusim.net/tcp/7010/wss\"]\n      );\n\n      const nodes = await getStatusFleetNodes();\n      await Promise.all(\n        nodes.map((addr) => {\n          return waku.dial(addr);\n        })\n      );\n\n      dispatch({ type: \"START_WAKU\", payload: { waku: waku } });\n      waku.relay.addObserver(handleRelayMessage, [ChatContentTopic]);\n\n      waku.libp2p.peerStore.on(\n        \"change:protocols\",\n        handleProtocolChange.bind({}, waku)\n      );\n    } catch (e) {\n      console.log(\"Issue starting waku \", e);\n    }\n  };\n\n  React.useEffect(() => {\n//    startUp();\n    return () => {\n      state.waku?.libp2p.peerStore.removeListener(\n        \"change:protocols\",\n        handleProtocolChange.bind({}, state.waku)\n      );\n    };\n  }, []);\n\n  const wallets = [{ walletName: \"metamask\", preferred: true }];\n  const onboard = Onboard({\n    networkId: 1,\n    subscriptions: {\n      wallet: async (wallet) => {\n        try {\n          //@ts-ignore\n          if (window.ethereum) {\n            //@ts-ignore\n            window.ethereum.enable();\n          }\n          web3 = new ethers.providers.Web3Provider(wallet.provider);\n          dispatch({ type: \"SET_WEB3\", payload: { web3: web3 } });\n          deriveChatKey();\n        } catch (err) {\n          console.log(err);\n          toast({\n            position: \"top\",\n            status: \"error\",\n            title: \"Something went wrong\",\n            description: err?.toString(),\n            duration: 5000,\n          });\n        }\n      },\n      address: (address) => {\n        dispatch({ type: \"SET_ADDRESS\", payload: { address: address } });\n      },\n      balance: (balance) => {\n        dispatch({ type: \"SET_BALANCE\", payload: { balance: balance } });\n      },\n      network: (network) => {\n        dispatch({ type: \"SET_CHAIN\", payload: { chain: network } });\n      },\n    },\n    walletSelect: {\n      wallets: wallets,\n    },\n  });\n\n  const deriveChatKey = async () => {\n    let signature = await web3\n      .getSigner()\n      .signMessage(\"make it so, Number One\");\n    let chatKeyPair = await EthCrypto.createIdentity(Buffer.from(signature));\n    dispatch({ type: \"SET_KEYS\", payload: { keys: chatKeyPair } });\n  };\n\n  const broadcastChatKey = async () => {\n    if (!state.keys) {\n      return;\n    }\n    \n    const signedPubKeysignature = await web3\n      .getSigner()\n      .signMessage(state.keys.address);\n    const msg = WakuMessage.fromUtf8String(\n      JSON.stringify({\n        address: state.address,\n        chatKey: state.keys.publicKey,\n        signature: signedPubKeysignature,\n      }),\n      ChatContentTopic\n    );\n    state.waku?.relay.send(msg);\n  };\n\n  const handleConnect = async () => {\n    dispatch({ type: \"SET_ONBOARD\", payload: { onboard: onboard } });\n    try {\n      const walletSelected = await onboard.walletSelect();\n    } catch (err) {\n      console.log(err);\n      toast({\n        position: \"top\",\n        status: \"error\",\n        title: \"Something went wrong\",\n        description: err?.toString(),\n        duration: 5000,\n      });\n    }\n  };\n\n  return (\n    <ChakraProvider>\n      <GlobalContext.Provider value={{ dispatch, state }}>\n        <Center h=\"90vh\">\n          <VStack>\n            <Heading>WakuMono</Heading>\n            <WalletDisplay handleConnect={handleConnect} />\n            <Button onClick={startUp}>Connect to Waku</Button>\n            <Button onClick={broadcastChatKey}>Broadcast ChatKey</Button>\n            <HStack>\n              <VStack>\n              <Input\n                value={toAddress}\n                placeholder=\"Address\"\n                onChange={(evt) => setTo(evt.target.value)}\n              />\n              </VStack>\n              <Input\n                value={msgText}\n                placeholder=\"Enter a message\"\n                onChange={(evt) => setMsg(evt.target.value)}\n              />\n              <Button\n                onClick={() => {\n                  handleMessageSend(toAddress, msgText);\n                }}\n              >\n                Send Message\n              </Button>\n            </HStack>\n          </VStack>\n        </Center>\n      </GlobalContext.Provider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport {\n  Box,\n  Button,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverHeader,\n  PopoverBody,\n  PopoverArrow,\n  PopoverCloseButton,\n  Heading,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport GlobalContext from \"../context/globalContext\";\nimport { formatAddress } from \"../helpers/helpers\";\n\ntype WalletProps = {\n  handleConnect: () => void;\n};\n\nconst WalletDisplay: React.FC<WalletProps> = ({ handleConnect }) => {\n  const { state, dispatch } = React.useContext(GlobalContext);\n\n  const handleClick = () => {\n    if (state.onboard) {\n      state.onboard.walletReset();\n      dispatch({ type: \"SET_ADDRESS\", payload: { address: undefined } });\n      dispatch({ type: \"SET_WEB3\", payload: { web3: undefined } });\n    }\n  };\n\n  return (\n    <Box>\n      {state.address ? (\n        <Popover placement=\"top\">\n          <PopoverTrigger>\n            <Button w=\"250px\">\n              {formatAddress(state.address)}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent>\n            <PopoverArrow />\n            <PopoverCloseButton />\n            <PopoverHeader>\n              <Heading size=\"sm\">Wallet Details</Heading>\n            </PopoverHeader>\n            <PopoverBody>\n              <VStack>\n                <Button onClick={handleClick}>Disconnect Wallet</Button>\n              </VStack>\n            </PopoverBody>\n          </PopoverContent>\n        </Popover>\n      ) : (\n        <Button w=\"250px\" onClick={handleConnect}>\n          Connect Web3\n        </Button>\n      )}\n    </Box>\n  );\n};\n\nexport default WalletDisplay;\n"],"sourceRoot":""}